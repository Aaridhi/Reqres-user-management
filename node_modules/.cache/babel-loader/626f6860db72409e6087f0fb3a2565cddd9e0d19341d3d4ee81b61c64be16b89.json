{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'https://reqres.in/api';\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Auth services\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/login', {\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n      error: 'Login failed'\n    };\n  }\n};\n\n// User services\nexport const getUsers = async (page = 1) => {\n  try {\n    const response = await api.get(`/users?page=${page}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      error: 'Failed to fetch users'\n    };\n  }\n};\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n      error: 'Failed to update user'\n    };\n  }\n};\nexport const deleteUser = async id => {\n  try {\n    const response = await api.delete(`/users/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      error: 'Failed to delete user'\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","login","email","password","response","post","data","_error$response","getUsers","page","get","_error$response2","updateUser","id","userData","put","_error$response3","deleteUser","delete","_error$response4"],"sources":["/Users/aaridhi0301/reqres-user-management/src/services/api.js"],"sourcesContent":["\nimport axios from 'axios';\n\nconst BASE_URL = 'https://reqres.in/api';\n\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Auth services\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/login', { email, password });\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Login failed' };\n  }\n};\n\n// User services\nexport const getUsers = async (page = 1) => {\n  try {\n    const response = await api.get(`/users?page=${page}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to fetch users' };\n  }\n};\n\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to update user' };\n  }\n};\n\nexport const deleteUser = async (id) => {\n  try {\n    const response = await api.delete(`/users/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response?.data || { error: 'Failed to delete user' };\n  }\n};\n\nexport default api;"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AAGxC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,QAAQ,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC9D,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA,IAAAS,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAT,KAAK,CAACM,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAI;MAAER,KAAK,EAAE;IAAe,CAAC;EACzD;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,QAAQ,GAAG,MAAAA,CAAOC,IAAI,GAAG,CAAC,KAAK;EAC1C,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMjB,GAAG,CAACuB,GAAG,CAAC,eAAeD,IAAI,EAAE,CAAC;IACrD,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA,IAAAa,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACM,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,KAAI;MAAER,KAAK,EAAE;IAAwB,CAAC;EAClE;AACF,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMjB,GAAG,CAAC4B,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEC,QAAQ,CAAC;IACxD,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA,IAAAkB,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAlB,KAAK,CAACM,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;MAAER,KAAK,EAAE;IAAwB,CAAC;EAClE;AACF,CAAC;AAED,OAAO,MAAMmB,UAAU,GAAG,MAAOJ,EAAE,IAAK;EACtC,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMjB,GAAG,CAAC+B,MAAM,CAAC,UAAUL,EAAE,EAAE,CAAC;IACjD,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA,IAAAqB,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAArB,KAAK,CAACM,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAI;MAAER,KAAK,EAAE;IAAwB,CAAC;EAClE;AACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}